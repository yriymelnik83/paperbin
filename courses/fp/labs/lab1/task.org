* Практична робота №1 - підготовка CL-середовища

** Вступ

Однією з традиційних особливостей мов програмування з сімейства *Lisp*
є те, що практично всі компоненти сучасного інтергрованого середовища
розробки програмного забезпечення (*IDE*) є "вбудованими" в
компілятор. Типове середовище *Lisp* - це інтерактивний інструмент під
назвою **REPL** (*Read-Eval-Print Loop*), що може читати, компілювати
та виконувати код, введений користувачем, автоматично переходячи в
режим дебагу при виникненні помилки. Багато сучасних мов
програмування, зокрема *Python*, використовують спрощені версії
подібних середовищ для екпериментів та прототипування, але дуже мало з
них можуть навіть наблизитись за функціональністю до *REPL*-середовищ
популярних компіляторів *Common Lisp*, в першу чергу через систему
обробки помилок, що передбачена стандартом мови.

Дана лабораторна робота полягає у налаштуванні середовища *Common
Lisp*, що складається з компілятора, текстового редактора та адаптера
для взаємодії між редактором та компілятором. Ми використовуватимемо
відкритий компілятор **SBCL**, який на даний момент є найращим
безкоштовним компілятором *Common Lisp*, текстовий редактор **Emacs**,
який вже кілька десятиліть є одним з найпопулярніших текстових
редакторів у світі, та плагін для *Emacs* під назвою **SLIME**, який і
є адаптером між текстовим редактором та компілятором.



** Встановлення програмного забезпечення

Для встановлення *SBCL* та *Emacs* 26.2 на операційну систему *Linux*
необхідно виконати наступні команди (приклади наведено для
дистрибутиву Ubuntu):

#+BEGIN_SRC sh
  # Додаткові пакети
  sudo apt install git
  # SBCL
  sudo apt install sbcl
  # Emacs
  sudo apt-add-repository ppa:kelleyk/emacs
  sudo apt update
  sudo apt install emacs26
#+END_SRC

На *macOS* *Emacs* можна встановити, виконавши наступну команду:

#+BEGIN_SRC sh
  # SBCL
  brew intall sbcl
  # Emacs
  brew cask install emacs
#+END_SRC

Для операційної системи *Windows* *SBCL* та *Emacs* можна завантажити
за посиланнями
http://prdownloads.sourceforge.net/sbcl/sbcl-2.0.0-x86-64-windows-binary.msi
та
https://ftp.gnu.org/gnu/emacs/windows/emacs-26/emacs-26.1-x86_64.zip
відповідно. Для запуску редактора необхідно виконати файл
~bin\runemacs.exe~. Зверніть увагу на те, що для налаштування адаптера
необхідно знати шлях, за яким було встановлено компілятор.

Після того, як втановлення *SBCL* та *Emacs* завершено, необхідно
встановити плагін *SLIME*. Це можна зробити самостійно відповідно до
[[https://github.com/slime/slime][інструкцій]], або скористатись файлом ~.emacs~ у даній директорії, який
необхідно розмістити у "домашній" директорії на робочому комп'ютері
(~/home/<username>/.emacs~ на *Linux*, ~/Users/<username>/.emacs~ на
*macOS* та ~%HOMEPATH%\AppData\Roaming\.emacs~ на *Windows*). У
випадку з Windows необхідно у цьому файлі замінити змінну
~inferior-lisp-program~ на шлях, за яким було встановлено компілятор
*SBCL*. Можна помітити, що конфігурація та розширення (розробка
плагінів) текстового редактора *Emacs* здійснюється за допомогою
діалекта *Lisp* під назвою *Emacs Lisp* або *Elisp*.

При запуску *Emacs* встановить всі необхідні компоненти і відкриє файл
під назвою ~*scratch*~, який є спеціальною "чернеткою" для нотаток та
налаштувань. Після цього можна потестувати налаштування середовища,
натиснувши комбінацію клавіш ~Alt+x~ для переходу в режим команд і
виконати команду ~slime~, яка запустить компілятор *SBCL*, налаштує
адаптер та покаже рядок введення *REPL*:

#+BEGIN_SRC sh
  CL-USER>
  
#+END_SRC

У цьому вікні редактора можна безпосередньо вводити, редагувати,
компілювати та виконувати програмний код *Common Lisp*.


** Завдання для реалізації

Необхідно реалізувати наступні функції:

#+BEGIN_SRC lisp
  ;; Має повертати два значення: знайдений елемент або NIL, якщо не
  ;; знайдено, та прапорець, який вказує, чи значення було знайдено, чи
  ;; ні.
  (defun property-list-get (list key)
    ...)

  ;; Має повертати новий список з доданим ключем та значенням.
  (defun property-list-add (list key value)
    ...)

  ;; Має повертати два значення: елемент, що видалено, то новий список
  ;; без видаленої пар ключа та значення.
  (defun property-list-add (list key value)
    ...)
#+END_SRC

** Захист

Для захисту лабораторної роботи необхідно продемонструвати 
  - запуск та зупинку робочого *REPL*-середовища,
  - виконання простих арифметичних обчислень в *REPL*-середовищі,
  - оголошення функцій ~property-list-get~, ~property-list-add~ та
    ~property-list-delete~, завантаження цього файлу за допомогою
    функції ~load~, та вибіркову компіляцію функцій в *SLIME*.
  - роботу функцій ~property-list-*~.
